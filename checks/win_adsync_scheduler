#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# win_adsync_scheduler - Azure AD Connecht Scheduler check
#
# Copyright (C) 2020  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# <<<win_adsync_schedule>>>
# SyncCycleEnabled:True
# MaintenanceEnabled:True
# StagingModeEnabled:False
# SchedulerSuspended:False
# SyncCycleInProgress:False
# NextSyncCycleStartTimeInUTC:05.06.2020 05:11:51

import calendar

factory_settings['win_adsync_scheduler_default_levels'] = {
    'SyncCycleEnabled': (True, 2),
    'MaintenanceEnabled': (True, 2),
}

def parse_win_adsync_scheduler(items):
    parsed = {}
    for line in items:
        key, value = line
        if value == 'True':
            parsed[key] = True
        elif value == 'False':
            parsed[key] = False
        elif key in ['NextSyncCycleStartTimeInUTC']:
            try:
                struc_time = time.strptime(value, "%d.%m.%Y %H:%M:%S")
                parsed[key] = time.localtime((calendar.timegm(struc_time)))
            except Exception:
                pass
        else:
            parsed[key] = value
    return parsed

def inventory_win_adsync_scheduler(parsed):
    yield None, {}

def check_win_adsync_scheduler(item, params, parsed):
    for state in ['SyncCycleEnabled', 'MaintenanceEnabled', 'StagingModeEnabled', 'SchedulerSuspended']:
        if state not in params:
            continue

        if state not in parsed:
            yield 3, "Unknown state for %s" % state
            continue

        if parsed[state] == params[state][0]:
            yield 0, "%s is %s" % (state, parsed[state])
        else:
            yield params[state][1], "%s is %s" % (state, parsed[state])
    
    if 'NextSyncCycleStartTimeInUTC' in parsed:
        yield 0, "Next sync: %s" % time.strftime("%c", parsed['NextSyncCycleStartTimeInUTC'])

check_info['win_adsync_scheduler'] = {
  'parse_function' : parse_win_adsync_scheduler,
  'inventory_function' : inventory_win_adsync_scheduler,
  'check_function'     : check_win_adsync_scheduler,
  'service_description': 'ADSync Scheduler',
  'group': 'win_adsync_scheduler',
  'default_levels_variable': 'win_adsync_scheduler_default_levels',
}